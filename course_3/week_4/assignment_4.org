#+TITLE: Understanding and Predicting Property Maintenance Fines

* Introduction
You are currently looking at **version 1.0** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [[https://www.coursera.org/learn/python-machine-learning/resources/bANLa][Jupyter Notebook FAQ]] course resource.

This assignment is based on a data challenge from the Michigan Data Science Team ([[http://midas.umich.edu/mdst/][MDST)]]. 

The Michigan Data Science Team ([[http://midas.umich.edu/mdst/][MDST]]) and the Michigan Student Symposium for Interdisciplinary Statistical Sciences ([[https://sites.lsa.umich.edu/mssiss/][MSSISS]]) have partnered with the City of Detroit to help solve one of the most pressing problems facing Detroit - blight. [[http://www.detroitmi.gov/How-Do-I/Report/Blight-Complaint-FAQs][Blight violations]] are issued by the city to individuals who allow their properties to remain in a deteriorated condition. Every year, the city of Detroit issues millions of dollars in fines to residents and every year, many of these fines remain unpaid. Enforcing unpaid blight fines is a costly and tedious process, so the city wants to know: how can we increase blight ticket compliance?

The first step in answering this question is understanding when and why a resident might fail to comply with a blight ticket. This is where predictive modeling comes in. For this assignment, your task is to predict whether a given blight ticket will be paid on time.

All data for this assignment has been provided to us through the [[https://data.detroitmi.gov/][Detroit Open Data Portal]]. **Only the data already included in your Coursera directory can be used for training the model for this assignment.** Nonetheless, we encourage you to look into data from other Detroit datasets to help inform feature creation and model selection. We recommend taking a look at the following related datasets:

 - [[https://data.detroitmi.gov/Property-Parcels/Building-Permits/xw2a-a7tf][Building Permits]]
 - [[https://data.detroitmi.gov/Property-Parcels/Trades-Permits/635b-dsgv][Trades Permits]]
 - [[https://data.detroitmi.gov/Government/Improve-Detroit-Submitted-Issues/fwz3-w3yn][Improve Detroit: Submitted Issues]]
 - [[https://data.detroitmi.gov/Public-Safety/DPD-Citizen-Complaints-2016/kahe-efs3][DPD: Citizen Complaints]]
 - [[https://data.detroitmi.gov/Property-Parcels/Parcel-Map/fxkw-udwf][Parcel Map]]

We provide you with two data files for use in training and validating your models: train.csv and test.csv. Each row in these two files corresponds to a single blight ticket, and includes information about when, why, and to whom each ticket was issued. The target variable is compliance, which is True if the ticket was paid early, on time, or within one month of the hearing data, False if the ticket was paid after the hearing date or not at all, and Null if the violator was found not responsible. Compliance, as well as a handful of other variables that will not be available at test-time, are only included in train.csv.

Note: All tickets where the violators were found not responsible are not considered during evaluation. They are included in the training set as an additional source of data for visualization, and to enable unsupervised and semi-supervised approaches. However, they are not included in the test set.

** File descriptions (Use only this data for training your model!)
 
     train.csv - the training set (all tickets issued 2004-2011)
     test.csv - the test set (all tickets issued 2012-2016)
     addresses.csv & latlons.csv - mapping from ticket id to addresses, and from addresses to lat/lon coordinates. 
      Note: misspelled addresses may be incorrectly geolocated.
 
** Data fields
*** train.csv & test.csv
 
    - ticket_id - unique identifier for tickets
    - agency_name - Agency that issued the ticket
    - inspector_name - Name of inspector that issued the ticket
    - violator_name - Name of the person/organization that the ticket was issued to
    - violation_street_number, violation_street_name, violation_zip_code - Address where the violation occurred
    - mailing_address_str_number, mailing_address_str_name, city, state, zip_code, non_us_str_code, country - Mailing address of the violator
    - ticket_issued_date - Date and time the ticket was issued
    - hearing_date - Date and time the violator's hearing was scheduled
    - violation_code, violation_description - Type of violation
    - disposition - Judgment and judgement type
    - fine_amount - Violation fine amount, excluding fees
    - admin_fee - $20 fee assigned to responsible judgments
    - state_fee - $10 fee assigned to responsible judgments
    - late_fee - 10% fee assigned to responsible judgments
    - discount_amount - discount applied, if any
    - clean_up_cost - DPW clean-up or graffiti removal cost
    - judgment_amount - Sum of all fines and fees
    - grafitti_status - Flag for graffiti violations
     
*** train.csv only

    - payment_amount - Amount paid, if any
    - payment_date - Date payment was made, if it was received
    - payment_status - Current payment status as of Feb 1 2017
    - balance_due - Fines and fees still owed
    - collection_status - Flag for payments in collections
    - compliance [target variable for prediction] 
      -  Null = Not responsible
      -  0 = Responsible, non-compliant
      -  1 = Responsible, compliant
    - compliance_detail - More information on why each ticket was marked compliant or non-compliant

** Evaluation

Your predictions will be given as the probability that the corresponding blight ticket will be paid on time.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC). 

Your grade will be based on the AUC score computed for your classifier. A model which with an AUROC of 0.7 passes this assignment, over 0.75 will receive full points.

For this assignment, create a function that trains a model to predict blight ticket compliance in Detroit using `train.csv`. Using this model, return a series of length 61001 with the data being the probability that each corresponding ticket from `test.csv` will be paid, and the index being the ticket_id.
 
*** Example:
#+BEGIN_EXAMPLE
     ticket_id
        284932    0.531842
        285362    0.401958
        285361    0.105928
        285338    0.018572
                  ...
        376499    0.208567
        376500    0.818759
        369851    0.018528
        Name: compliance, dtype: float32
#+END_EXAMPLE

* Imports

#+BEGIN_SRC ipython :session blight :results none
import pandas
import numpy
#+END_SRC

* Constants

#+BEGIN_SRC ipython :session blight :results none
TARGET = "compliance"
COLUMNS = ["ticket_id",
           "agency_name",
           "inspector_name",
           "violator_name",
           "violation_street_number", "violation_street_name", "violation_zip_code",
           "mailing_address_str_number", "mailing_address_str_name", "city", "state", "zip_code", "non_us_str_code", "country",
           "ticket_issued_date",
           "hearing_date",
           "violation_code", "violation_description",
           "disposition",
           "fine_amount",
           "admin_fee",
           "state_fee",
           "late_fee",
           "discount_amount",
           "clean_up_cost",
           "judgment_amount",
           "grafitti_status",]
#+END_SRC

* Loading The Data
#+BEGIN_SRC ipython :session blight :results none
training = pandas.read_csv("train.csv", encoding="latin1")
#+END_SRC

#+BEGIN_SRC ipython :session blight
training.describe()
#+END_SRC

#+RESULTS:
#+begin_example
           ticket_id  violation_street_number  violation_zip_code  \
count  250306.000000             2.503060e+05                 0.0   
mean   152665.543099             1.064986e+04                 NaN   
std     77189.882881             3.188733e+04                 NaN   
min     18645.000000             0.000000e+00                 NaN   
25%     86549.250000             4.739000e+03                 NaN   
50%    152597.500000             1.024400e+04                 NaN   
75%    219888.750000             1.576000e+04                 NaN   
max    366178.000000             1.415411e+07                 NaN   

       mailing_address_str_number    fine_amount      admin_fee  \
count                2.467040e+05  250305.000000  250306.000000   
mean                 9.149788e+03     374.423435      12.774764   
std                  3.602034e+04     707.195807       9.607344   
min                  1.000000e+00       0.000000       0.000000   
25%                  5.440000e+02     200.000000       0.000000   
50%                  2.456000e+03     250.000000      20.000000   
75%                  1.292725e+04     250.000000      20.000000   
max                  5.111345e+06   10000.000000      20.000000   

           state_fee       late_fee  discount_amount  clean_up_cost  \
count  250306.000000  250306.000000    250306.000000       250306.0   
mean        6.387382      21.494506         0.125167            0.0   
std         4.803672      56.464263         3.430178            0.0   
min         0.000000       0.000000         0.000000            0.0   
25%         0.000000       0.000000         0.000000            0.0   
50%        10.000000      10.000000         0.000000            0.0   
75%        10.000000      25.000000         0.000000            0.0   
max        10.000000    1000.000000       350.000000            0.0   

       judgment_amount  payment_amount    balance_due     compliance  
count    250306.000000   250306.000000  250306.000000  159880.000000  
mean        268.685356       48.898986     222.449058       0.072536  
std         626.915212      222.422425     606.394010       0.259374  
min           0.000000        0.000000   -7750.000000       0.000000  
25%           0.000000        0.000000       0.000000       0.000000  
50%         140.000000        0.000000      25.000000       0.000000  
75%         305.000000        0.000000     305.000000       0.000000  
max       11030.000000    11075.000000   11030.000000       1.000000  
#+end_example

#+BEGIN_SRC ipython :session blight
training.head(n=2)
#+END_SRC

#+RESULTS:
#+begin_example
   ticket_id                                     agency_name  \
0      22056  Buildings, Safety Engineering & Env Department   
1      27586  Buildings, Safety Engineering & Env Department   

     inspector_name                      violator_name  \
0   Sims, Martinzie  INVESTMENT INC., MIDWEST MORTGAGE   
1  Williams, Darrin           Michigan, Covenant House   

   violation_street_number violation_street_name  violation_zip_code  \
0                   2900.0                 TYLER                 NaN   
1                   4311.0               CENTRAL                 NaN   

   mailing_address_str_number mailing_address_str_name     city     ...      \
0                         3.0                S. WICKER  CHICAGO     ...       
1                      2959.0       Martin Luther King  Detroit     ...       

  clean_up_cost judgment_amount payment_amount balance_due  \
0           0.0           305.0            0.0       305.0   
1           0.0           855.0          780.0        75.0   

          payment_date      payment_status collection_status grafitti_status  \
0                  NaN  NO PAYMENT APPLIED               NaN             NaN   
1  2005-06-02 00:00:00        PAID IN FULL               NaN             NaN   

                          compliance_detail  compliance  
0               non-compliant by no payment         0.0  
1  compliant by late payment within 1 month         1.0  

[2 rows x 34 columns]
#+end_example


* Blight Model

#+BEGIN_SRC ipython :session blight :results none
def blight_model():
    
    # Your code here
    
    return # Your answer here
#+END_SRC

